class Solution {
public:
    bool isValid(string s) {
        return (stringReduction(s).length() == 0);
    }
private:
    string open   = "({[";
    string closed = ")}]";
    string temp;

    bool isOpen(char subChar){
        for(int i = 0; i < open.length(); i++){
            if(subChar == open[i]){return true;}
        }
        return false;
    }
    bool isFrontMatch(int charIndex, string s){
        return (s[0] == open[charIndex]) && (s[1] == closed[charIndex]);
    }

    string stringReduction(string s) {
        std::cout<<s;
        if(s.length()>1){
            if(isFrontMatch(0, s) || isFrontMatch(1, s) || isFrontMatch(2, s)) {s.erase(0,2);}
        } 
        if(s.length()>1){
            if(isOpen(s[0]) && isOpen(s[1])){
                temp = stringReduction(s.erase(0,1));
                s = s[0]; 
                s += temp;
            }
            else{
                s = stringReduction(s);
            }
        }
        return s;
    }
};
